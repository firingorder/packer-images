name: Packer

on:
  workflow_call:
    inputs:
      image_directory:
        required: true
        type: string
      force_build:
        required: false
        type: boolean
        default: false
    secrets:
      packer_azure_credentials:
        required: true
      packer_client_id:
        required: true
      packer_client_secret:
        required: true
      packer_subscription_id:
        required: true
      packer_tenant_id:
        required: true
      packer_artifacts_resource_group:
        required: true
      packer_build_resource_group:
        required: true
      packer_gallery_resource_group:
        required: true
      packer_gallery_name:
        required: true

jobs:
  check_source:
    name: Fetch image from source file
    runs-on: ubuntu-latest
    outputs:
      publisher: ${{ steps.fetch_publisher.outputs.value }}
      offer: ${{ steps.fetch_offer.outputs.value }}
      sku: ${{ steps.fetch_sku.outputs.value }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Fetch Publisher
      id: fetch_publisher
      uses: sergeysova/jq-action@v2
      with:
        cmd: 'jq .source_image_publisher ${{ inputs.image_directory }}/variables.json -r'

    - name: Fetch Offer
      id: fetch_offer
      uses: sergeysova/jq-action@v2
      with:
        cmd: 'jq .source_image_offer ${{ inputs.image_directory }}/variables.json -r'

    - name: Fetch SKU
      id: fetch_sku
      uses: sergeysova/jq-action@v2
      with:
        cmd: 'jq .source_image_sku ${{ inputs.image_directory }}/variables.json -r'

  latest_version:
    name: Get latest version from Azure
    runs-on: ubuntu-latest
    needs: check_source
    outputs:
      version: ${{ steps.get_latest_version.outputs.version }}
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.packer_azure_credentials }}

    - name: Get Latest Version
      id: get_latest_version
      uses: azure/CLI@v1
      with:
        azcliversion: 2.34.1
        inlineScript: |
          latest_version=$(
            az vm image show \
              --urn "${{ needs.check_source.outputs.publisher }}:${{ needs.check_source.outputs.offer }}:${{ needs.check_source.outputs.sku }}:latest" \
              --query name \
              --out tsv
          )
          echo "Publisher: ${{ needs.check_source.outputs.publisher }}"
          echo "Offer:     ${{ needs.check_source.outputs.offer }}"
          echo "SKU:       ${{ needs.check_source.outputs.sku }}"
          echo "Version:   ${latest_version}"
          echo "version=${latest_version}" >> $GITHUB_OUTPUT

  check_image_exists:
    name: Check if latest version has already been built
    runs-on: ubuntu-latest
    needs: [check_source, latest_version]
    if: inputs.force_build == false
    outputs:
      exists: ${{ steps.get_image.outputs.exists }}
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.packer_azure_credentials }}

    - name: Check If Image Exists
      id: get_image
      uses: azure/CLI@v1
      with:
        azcliversion: 2.34.1
        inlineScript: |
          if az image show \
            --resource-group "${{ secrets.packer_artifacts_resource_group }}" \
            --name "${{ inputs.sku }}-${{ needs.latest_version.outputs.version }}"; then
            image_exists=true
          else
            image_exists=false
          fi
          echo "Image Exists: ${image_exists}"
          echo "exists=${image_exists}" >> $GITHUB_OUTPUT

  build:
    name: Run Packer
    runs-on: ubuntu-latest
    needs: [check_source, latest_version, check_image_exists]
    if: always() && (inputs.force_build == true || needs.check_image_exists.outputs.exists == false)
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.packer_azure_credentials }}

    - name: Validate Packer Template
      uses: hashicorp/packer-github-actions@master
      with:
        command: validate
        arguments: -syntax-only
        target: ./${{ inputs.image_directory }}

    - name: Build Packer Image
      uses: hashicorp/packer-github-actions@master
      with:
        command: build
        arguments: -color=false -var-file=./${{ inputs.image_directory }}/variables.json
        target: ./${{ inputs.image_directory }}
      env:
        PKR_VAR_client_id: ${{ secrets.packer_client_id }}
        PKR_VAR_client_secret: ${{ secrets.packer_client_secret }}
        PKR_VAR_subscription_id: ${{ secrets.packer_subscription_id }}
        PKR_VAR_tenant_id: ${{ secrets.packer_tenant_id }}
        PKR_VAR_artifacts_resource_group: ${{ secrets.packer_artifacts_resource_group }}
        PKR_VAR_build_resource_group: ${{ secrets.packer_build_resource_group }}
        PKR_VAR_source_image_version: ${{ needs.latest_version.outputs.version }}
        PKR_VAR_gallery_resource_group: ${{ secrets.packer_gallery_resource_group }}
        PKR_VAR_gallery_name: ${{ secrets.packer_gallery_name }}

    - name: Fetch managed image(s)
      id: managed_images
      uses: sergeysova/jq-action@v2
      with:
        cmd: 'jq .builds[].artifact_id ${{ inputs.image_directory }}/manifest.json -r'
        multiline: true

    - name: Clean up managed image(s)
      uses: azure/CLI@v1
      with:
        azcliversion: 2.34.1
        inlineScript: |
          images="${{ steps.managed_images.outputs.value }}"
          echo "Removing managed images: $images"
          az image delete --ids $images
